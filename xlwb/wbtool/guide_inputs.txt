Guide to write configuration file for web interface of xlwb tool.

- Configuration files are yaml files. For more details of how to write yaml file have a quick look at
https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html
yaml is nothing but a way to describe dictionaries and lists in a humnan redable format.

- Our configuration file is dictionary written as yaml file. it has following keys.
1. advanced_inputs (optional) - this has to be present if you want advanced Web UI for your exceltool.
under this key you should have input cells from excelsheet which needs to be seen by user as advanced option.
a sample advanced input cell will look like this
{default: Inputs&Summary!E34, description: Inputs&Summary!C34, id: Inputs&Summary!D34,
  name: Inputs&Summary!D34, type: float, ui: float, unit: Inputs&Summary!F34, value: Inputs&Summary!D34}
a cell itself is a dictionary sepcifying
  - id : cellid as in sheet1!A32
  - description: cellid which contains description or you can give description directly as text
  - value: this value will be shown in ui form ...it can be cellid or value itself
  - name: some name for this field. this is only for easy debuging of yaml file, not used by program
  - type: any one from float, int, bool, text, menu
  - ui: ui type any one of float, int, bool, text, menu
  - default : additional cellid which will be shown in advanced ui
  - unit: additional cellid which will be shown in advanced ui

2. exceldata: name of file which was generated by excelparser. e.g. RE_Tariff_and_Financial_Analysis_Tool_v2.2-unprotected.bin
this is binary file.
3. input_cells: list of basic input cells for computaion of excelsheet. It has same fields as described in advanced_inputs
except that it does not have default and unit field. in case type and ui is menu, additonal field menudata has to be
provided. e.g
{description: Inputs&Summary!C16, id: Inputs&Summary!D16, menudata: 'Introduction!O25:O35',
  name: technology, type: text, ui: menu, value: Inputs&Summary!D16}
  menudata can be a excel range representing excel cells or it can be list of text.

3. output: it is comma sepertated list of ranges, cells. these are the target cells to be computed.
e.g. Inputs&Summary!I3:M8,Test!A5

4. macro: (optional) it is a sub dictionary which contains information of excel macro equivalent python module.
      args: (optional .. if not given input_cells + advanced_inputs will be passed) [Inputs&Summary!D14, Inputs&Summary!D15, Inputs&Summary!D16, Inputs&Summary!D17,
        Inputs&Summary!D18]
      function: HandleTechOrStateChange
      module: RE_Tariff_macros
here RE_Tariff_macros is python module which contains a function HandleTechOrStateChange. This function will be called
with given parameters as given in args

5. charts: list of charts to be seen. every chart has following items in it
  id: tarrif (ths is name of dataset)
  X: Inputs&Summary!I4:I8 (First column manily X axis of chart)
  series: Inputs&Summary!J4:M8 (other columns , data for Y axis)
  names: Inputs&Summary!J3:M3 (names of series )
  rowwise: false (every row is taken as dataseries else column is taken as dataseries)
  xcategory: true (whether X axis data is categorical or not)
  xname: Output (Name for series mentioned in X)
  types: (here you specify all the charts to be seen on above mentioned data)
    Table: (chart name one of Table, AreaChart, LineChart, ColumnChart, BubbleChart, SteppedAreaChart
             ComboChart, ScatterChart, PieChart, Histogram, CandlestickChart. These are google charts)
      formats:
       - NumberFormat:
          columns: [1, 2, 3, 4]
          options: {fractionDigits: 2}
      options: {allowHtml: true, alternatingRowStyle: true, height: 100%, showRowNumber: true,
        width: 100%}
      style: 'width: 800px; height: 300px'

more details of what options can be given to a specific chart can be seen at google charts documentation
https://developers.google.com/chart/interactive/docs/
